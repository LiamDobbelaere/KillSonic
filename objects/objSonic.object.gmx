<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSonicWalk</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grav = 1;
hsp = 0.1;
vsp = 0;
jumpspeed = 16;
movespeed = 16;
grounded = false;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//EGG-NAV Sonic AI code
if (x &gt; objEggBase01.x) {
    key_left = -1;
    key_right = 0;
} else {
    key_left = 0;
    key_right = 1;
}

key_jump = abs(x - objEggBase01.x) &lt; 100;

//key_left = -keyboard_check(vk_left);
//key_right = keyboard_check(vk_right);
//key_jump = keyboard_check_pressed(vk_space);


move = key_left + key_right;

hsp = lerp(hsp, move * movespeed, 0.06) - 0.5;

if (vsp &lt; 10) vsp += grav;

if (place_meeting(x, y + 1, objWall)) {
    vsp = key_jump * -jumpspeed;
    
    grounded = true;
} else {
    if (grounded) {
        audio_play_sound(sndSonicJump, 1, false);
    }    

    grounded = false;
}

if (place_meeting(x + hsp, y, objWall)) {
    while (!place_meeting(x + sign(hsp), y, objWall)) {
        x += sign(hsp);
    }
    
    hsp = 0;
}

x += hsp;

if (x &lt; 0) x = 0;

if (place_meeting(x, y + vsp, objWall)) {
    while (!place_meeting(x, y + sign(vsp), objWall)) {
        y += sign(vsp);
    }
    
    vsp = 0;
}

if (place_meeting(x, y + vsp, objEggBase01)) {
    if (!objEggBase01.flash) {
        audio_play_sound(sndBossHit, 1, false);
        vsp *= -1;
        with (objEggBase01) {
            event_user(1);
        }
    }
}

y += vsp;

if (!grounded) {
    sprite_index = sprSonicJump;
    image_speed = 1;
}
else if (hsp &gt; 4) {
    sprite_index = sprSonicRun;
    image_speed = 1;
} else {
    sprite_index = sprSonicWalk;
    image_speed = 0.2 + hsp / movespeed;
}

image_speed *= sign(hsp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
