<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSliderKnob</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sliding = false
maxvalue = 16
value = 0
maxdist = 256
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var sel_attachpoint = noone;
//Find selected attachment point
var a_num = instance_number(objAttachPoint);
for (var i = 0; i &lt; a_num; i++) {
    var attachpoint = instance_find(objAttachPoint, i);
    
    if (attachpoint.selected) {
        sel_attachpoint = attachpoint;
    }
}

visible = sel_attachpoint != noone;

if (sliding) {
    x = clamp(xstart + (mouse_x - xstart), xstart, xstart + maxdist)
    if (sel_attachpoint != noone) sel_attachpoint.motorspeed = value;
}

value = round(((x - xstart) / maxdist) * maxvalue);    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sliding) {
    global.enablemotors = false;
    sliding = false;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sliding = true;
global.enablemotors = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(global.font_outline);
draw_set_halign(fa_left);
draw_set_color(c_white);
draw_text_transformed(xstart - 16 - 2, y - 32 - 4, "Motor speed", 2, 2, 0)


draw_set_color(make_color_rgb(132, 132, 132))
draw_rectangle(xstart - 16 - 2, y - 16 - 2, xstart + maxdist + 16 + 2, y + 16 + 2, false);
draw_set_color(make_color_rgb(231, 231, 231))
//Top
draw_line(xstart - 16 - 2 - 1, y - 16 - 2, xstart + maxdist + 16 + 2, y - 16 - 2);
draw_line(xstart - 16 - 2 - 1, y - 16 - 2 + 1, xstart + maxdist + 16 + 2, y - 16 - 2 + 1);
//Left
draw_line(xstart - 16 - 2, y - 16 - 2, xstart - 16 - 2, y + 16 + 2);
draw_line(xstart - 16 - 2 + 1, y - 16 - 2, xstart - 16 - 2 + 1, y + 16 + 2);
draw_set_color(make_color_rgb(99, 99, 99))
//Right
draw_line(xstart + maxdist + 16 + 2, y - 16 - 2, xstart + maxdist + 16 + 2, y + 16 + 2);
draw_line(xstart + maxdist + 16 + 2 - 1, y - 16 - 2, xstart + maxdist + 16 + 2 - 1, y + 16 + 2);
//Bottom
draw_line(xstart - 16 - 2, y + 16 + 2, xstart + maxdist + 16 + 2, y + 16 + 2);
draw_line(xstart - 16 - 2, y + 16 + 2 - 1, xstart + maxdist + 16 + 2, y + 16 + 2 - 1);
draw_set_color(c_white);
draw_line(xstart, y, xstart + maxdist, y);
draw_set_color(make_color_rgb(32, 64, 192));
draw_line(xstart, y, x, y);
draw_line(xstart, y + 1, x, y + 1);

draw_self();

draw_set_color(c_white);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_transformed(x + 2, y, value, 2, 2, 0);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
